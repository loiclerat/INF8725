% Loïc LERAT 1920881
% Simon-Pierre DESJARDINS 1739351


%% Nettoyage du workspace
clear all;
close all;
clc;

%% Exercice I
% Réhaussement d'images

image = imread('theArtist.png');

imageEgalisee = uint8(Egalisation_Histogramme(image));

imshow(imageEgalisee);

%2-3. Convolution

MasqueGau = 1/90 * [1,2,1,2,1;2,4,8,4,2;1,8,18,8,1;2,4,8,4,2;1,2,1,2,1];
imageConvo = uint8(Convolution(imageEgalisee,MasqueGau));

figure;
imshow(imageConvo);

%4. Rehaussement Contour

figure;

imageRehaussee = uint8(Rehaussement_Contour(imageConvo,1.2));
imshow(imageRehaussee);

%5. En rehaussant les contours, nous avons également rehaussé les
%particules de bruits qui restaient à la suite du filtre Gaussien. Le
%filtre médian permettrait de réduire le bruit impulsionnel de type "poivre
%et sel" que nous observons tout en préservant les contours. 


%% Exercice II
% Compteur de monnaie
%1.

image = imread('pieces.jpg');
imageGris = rgb2gray( image );
imshow(imageGris);


%2.

figure;
imageBinarisee = Binariser(imageGris,250,true);
imshow(imageBinarisee);

%3.
se = strel('disk',10);
closeImage = imclose(imageBinarisee,se);
figure;
imshow(closeImage);

%4

monnaie = Compter_Monnaie(closeImage);


%% Exercice III
% Transformée de Fourier 2D

%1.
imageVerticale = imread('Barres_Verticales.png');
imshow(imageVerticale);
figure;
imageHorizontale = imread('Barres_Horizontales.png');
imshow(imageHorizontale);
figure;
imageOblique = imread('Barres_Obliques.png');
imshow(imageOblique);

%2.

VerticaleTFD = abs(fft2(imageVerticale));

VerticaleAfterLog = log(1+fftshift(VerticaleTFD/numel(VerticaleTFD)));

figure;
imshow(VerticaleAfterLog, []);

HorizonTFD = abs(fft2(imageHorizontale));

HorizonAfterLog = log(1+fftshift(HorizonTFD/numel(HorizonTFD)));

figure;
imshow(HorizonAfterLog, []);

ObliqueTFD = abs(fft2(imageOblique));

ObliqueAfterLog = log(1+fftshift(ObliqueTFD/numel(ObliqueTFD)));

figure;
imshow(ObliqueAfterLog, []);

%3.

imageVerticaleRotate = imrotate(imageVerticale,70,'bilinear','crop');

VerticaleRotateTFD = abs(fft2(imageVerticaleRotate));

VerticaleRotateAfterLog = log(1+fftshift(VerticaleRotateTFD/numel(VerticaleRotateTFD)));

figure;
imshow(VerticaleRotateAfterLog, []);

%4.
%TODO TODO
%La transformée de Fourier 2D permet d'illustrer les intensités de l'image.
%Le sens des spectres sont perpendiculaires aux lignes des images et ce
%même après une rotation de 70 degrés de l'image. Cela démontre alors
%qu'une rotation dans le domaine spatial provoque également une rotation
%dans le domaine spectral.

%% Exercice IV
% Filtrage spectral

%1.
imageMaillot = imread('maillot.png');
imshow(imageMaillot);

maillotTFD = fft2(imageMaillot);

maillotTFDAfterShift = fftshift(maillotTFD/numel(maillotTFD));

figure;
imshow(log(1+abs(maillotTFDAfterShift)),[]);

%2.

figure;
imshow(imread('ResultatTFDMaillot.png'));

%3.
sizeMaillot = size(maillotTFDAfterShift);
Pb = fspecial('gaussian',sizeMaillot,500);
Pb = Pb/max(Pb(:));


maillotGaussianPb = maillotTFDAfterShift .* Pb;

figure;
imshow(log(1+abs(maillotGaussianPb)));

figure;
IShiftMaillotPb = ifftshift(maillotGaussianPb);
IFFTMaillotPb = ifft2(IShiftMaillotPb) * numel(IShiftMaillotPb);

imshow(IFFTMaillotPb);



%4. 

Pb = fspecial('gaussian',sizeMaillot,4000);
Pb = Pb/max(Pb(:));
Ph = 1 - Pb;

maillotGaussian = maillotTFDAfterShift .* Ph;

%figure;
%imshow(log(1+abs(maillotGaussian)));

figure;
IShiftMaillot = ifftshift(maillotGaussian);
IFFTMaillot = ifft2(IShiftMaillot);

imshow(abs(IFFTMaillot),[]);



%5

imwrite(maillotTFDAfterShift,'TFDMaillotMatLab.png');
TFDManche = imread('TFDMancheMatLab.png');
TFDManche = double(rgb2gray( TFDManche ));
TFDManche = TFDManche/max(TFDManche(:));


idealMaillot = maillotTFDAfterShift .* TFDManche;



IShiftManche = ifftshift(idealMaillot);
IFFTManche = ifft2(IShiftManche);
absoluManche = abs(IFFTManche);
tempManche = absoluManche *  (1/max(absoluManche(:))) *255;
tempManche = Binariser(tempManche,50 ,false);


figure;
imshow(tempManche,[]);

%6

TFDTorse = imread('TFDMaillotMatLabSansTorse.png');
TFDTorse = double(rgb2gray( TFDTorse ));
TFDTorse = TFDTorse/max(TFDTorse(:));


idealMaillot = maillotTFDAfterShift .* TFDTorse;



IShiftSansTorse = ifftshift(idealMaillot);
IFFTSansTorse = ifft2(IShiftSansTorse);
absoluSansTorse = abs(IFFTSansTorse);
tempSansTorse = absoluSansTorse *  (1/max(absoluSansTorse(:))) *255;
tempSansTorse = Binariser(tempSansTorse,50 ,false);


figure;
imshow(tempSansTorse,[]);

%7 
% Un filtre idéal risque de faire apparaître des artefacts dus aux
% ondulations dans la transformée de fourier. La réponse fréquencielle d'un
% filtre Butterworth est une gaussienne et permet donc d'éviter les
% artefacts. Il est tout de même à noter que plus l'ordre du filtre
% Butterworth augmente, plus on se rapproche du filtre idéal.

%8
